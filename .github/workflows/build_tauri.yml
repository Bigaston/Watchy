# Simple workflow for deploying static content to GitHub Pages
name: Build the game for Tauri

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: "tauri"
  cancel-in-progress: false

env:
  ITCH_USERNAME: bigaston
  ITCH_GAME_ID: watchy

jobs:
  publishTauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: npm install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
      - name: Publish Just Executable
        uses: actions/upload-release-asset@v1.0.1
        if: matrix.platform == 'windows-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.tauri.outputs.releaseUploadUrl }}
          asset_path: ./src-tauri/target/release/watchy.exe
          asset_name: watchy_standalone.exe
          asset_content_type: application/x-msdownload
      - run: echo ${{ steps.tauri.outputs.artifactPaths }}
      - name: Publish Windows Executable to Itch.io
        uses: KikimoraGames/itch-publish@v0.0.3
        if: matrix.platform == 'windows-latest'
        with:
          butlerApiKey: ${{secrets.BUTLER_API_KEY}}
          gameData: ./src-tauri/target/release/watchy.exe
          itchUsername: ${{env.ITCH_USERNAME}}
          itchGameId: ${{ env.ITCH_GAME_ID }}
          buildChannel: windows
      - name: Publish Linux AppImage to Itch.io
        uses: KikimoraGames/itch-publish@v0.0.3
        if: matrix.platform == 'ubuntu-20.04'
        with:
          butlerApiKey: ${{secrets.BUTLER_API_KEY}}
          gameData: ./src-tauri/target/release/bundle/appimage/
          itchUsername: ${{env.ITCH_USERNAME}}
          itchGameId: ${{ env.ITCH_GAME_ID }}
          buildChannel: linux
      - name: Publish MacOS APP to Itch.io
        uses: KikimoraGames/itch-publish@v0.0.3
        if: matrix.platform == 'macos-latest'
        with:
          butlerApiKey: ${{secrets.BUTLER_API_KEY}}
          gameData: ./src-tauri/target/release/bundle/macos/watchy.app
          itchUsername: ${{env.ITCH_USERNAME}}
          itchGameId: ${{ env.ITCH_GAME_ID }}
          buildChannel: macos